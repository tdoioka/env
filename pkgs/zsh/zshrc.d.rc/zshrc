export ZPLUG_HOME=~/.zshrc.d/zplug

# Load shrc
source ~/.shrc/loader.rc.sh
if [[ ! -n "$LANG" ]]; then
  export LANG=C.UTF-8
fi

# Extra fpath
fpath=(~/.shrc/zsh-funcs $fpath)
# Cashe-dir
ZCACHE=~/.zshrc.d/cache
[[ -e $ZCACHE ]] || mkdir $ZCACHE

# Disable exit C-d.
setopt IGNOREEOF

# Enable auto cd, cd command can omitted.
setopt AUTO_CD

# History
# http://zsh.sourceforge.net/Doc/Release/Options.html#History
# ################################################################
# History files.
HISTFILE=$ZCACHE/zsh_history
# History size on memory.
HISTSIZE=100000
# History size on file.
SAVEHIST=100000

# Share history with diffrent tty.
setopt share_history
# Immediately append to history when execute command.
setopt inc_append_history

# Remove unnecessary blanks.
setopt hist_reduce_blanks
# Not record history When begin with spaces.
setopt hist_ignore_space
# Not record when duplicates.
# setopt hist_ignore_dups
# Remove old duplicate history.
setopt hist_ignore_all_dups
# Not record duplicate command.
# setopt hist_save_no_dups
# Not record history command.
# setopt hist_no_store

# When fetch history put it to prompt instead of immediately execute.
setopt hist_verify
# When compeltion, expand history. (same as bang_hist.)
setopt hist_expand

# Enable CDR (change directory recent)
# ################################################################
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
# recent-dirs-insert [always,fallback,both]
zstyle ':completion:*' recent-dirs-insert both
zstyle ':chpwd:*' recent-dirs-max 100000
zstyle ':chpwd:*' recent-dirs-default true
zstyle ':chpwd:*' recent-dirs-file "$ZCACHE/chpwd-recent-dirs"
zstyle ':chpwd:*' recent-dirs-pushd true
bindkey "^R^H" zaw-cdr
# bindkey "^R^U" fzf-enhancd-up
# Remove, invalid path.
__zshrc::compaction-chpwd-recent-dirs() {
  emulate -L zsh
  setopt extendedglob
  local -aU reply
  integer history_size
  autoload -Uz chpwd_recent_filehandler
  chpwd_recent_filehandler
  history_size=$#reply
  reply=(${^reply}(N))
  (( $history_size == $#reply )) || chpwd_recent_filehandler $reply
}
# add-zsh-hook chpwd __zshrc::compaction-chpwd-recent-dirs

# fzf-zsh common
# ################################################################
__zshrc::eval-fzf-cmd() {
  setopt localoptions pipefail no_aliases 2> /dev/null
  local item
  eval "$FZF_CMD" |
    FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" $(__fzfcmd) -m "$@" |
    while read item
    do
      echo -n "${(q)item} "
    done
  local ret=$?
  echo
  return $ret
}

# fzf updirs-cd
# ################################################################
__zshrc::updirs() {
  local dd=${1-$PWD}
  if [[ $dd != / ]]; then
    dd=$(realpath ${dd}/..)
    echo $dd
    __zshrc::updirs $dd
  fi
}
__zshrc::fzf-updirs-cd-widget() {
  local FZF_CMD='echo "$(__zshrc::updirs)"'
  local dir="$(__zshrc::eval-fzf-cmd)"
  local ret=$?
  if [[ -n "$dir" ]]; then
    BUFFER="cd $dir"
    zle accept-line
  fi
  return $ret
}
zle -N __zshrc::fzf-updirs-cd-widget
bindkey "^R^U" __zshrc::fzf-updirs-cd-widget

# fzf ghq-put
# ################################################################
__zshrc::fzf-ghq-put-widget() {
  local FZF_CMD="ghq list"
  local ghqroot="$(ghq root)"
  local git="git -C ${ghqroot}/{} -c color.ui=always"
  local preview=
  preview="$preview $git remote -v | grep fetch;"
  preview="$preview $git status -sb | head -n 50;"
  preview="$preview $git log --decorate=short -1 --color;"
  local FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --preview '$preview'"
  local dir="$(__zshrc::eval-fzf-cmd)"
  local ret=$?
  if [[ -n "$dir" ]]; then
    LBUFFER="${LBUFFER}$ghqroot/$dir"
    zle reset-prompt
  fi
  return $ret
}
zle -N __zshrc::fzf-ghq-put-widget
bindkey "^R^E" __zshrc::fzf-ghq-put-widget

# fzf repo-cd
################################################################
__zshrc::fzf-repo-put-widget() {
  local FZF_CMD="repo list -f | awk '{print \$1}'"
  local git="git -C {} -c color.ui=always"
  local preview=
  preview="$preview $git remote -v | grep fetch;"
  preview="$preview $git status -sb | head -n 50;"
  preview="$preview $git log --decorate=short -1 --color;"
  local FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --preview '$preview'"
  local dir="$(__zshrc::eval-fzf-cmd)"
  local ret=$?
  if [[ -n "$dir" ]]; then
    LBUFFER="${LBUFFER}$ghqroot/$dir"
    zle reset-prompt
  fi
  return $ret
}
zle -N __zshrc::fzf-repo-put-widget
bindkey "^R^P"  __zshrc::fzf-repo-put-widget

# The zplug
# ..............................................................
source ~/.zshrc.d/zplug/init.zsh
zplug 'zplug/zplug', hook-build:'zplug --self-manage'

# Async processing
#   https://github.com/mafredri/zsh-async
zplug "mafredri/zsh-async"

# Syntax Highlight
#   https://github.com/zsh-users/zsh-syntax-highlighting
zplug "zsh-users/zsh-syntax-highlighting"

# History arrow key control
#   https://github.com/zsh-users/zsh-history-substring-search
# zplug "zsh-users/zsh-history-substring-search"

# History suggest
#   https://github.com/zsh-users/zsh-autosuggestions
zplug "zsh-users/zsh-autosuggestions"

# Completion
#   https://github.com/zsh-users/zsh-completions
zplug "zsh-users/zsh-completions"

# 256 Color
#   https://github.com/chrissicool/zsh-256color
zplug "chrissicool/zsh-256color"

# Show elapsed times.
#   https://github.com/popstas/zsh-command-time
zplug "popstas/zsh-command-time"

# git completion.
#   https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git
# zplug "plugins/git", from:oh-my-zsh

# fzf
#   https://github.com/junegunn/fzf
# ................................................................
zplug "junegunn/fzf", as:command, use:bin/fzf-tmux
# unset all bindings
bindkey -r "^R"  # fzf-history-widget
bindkey -r "^T"  # fzf-file-widget
bindkey -r "^[c" # fzf-cd-widget
bindkey "^R^D" fzf-cd-widget
bindkey "^R^F" fzf-file-widget

# fzf I/F like an anything.
#   https://github.com/mollifier/anyframe
# zplug "mollifier/anyframe"

# Directory change by fzf
#   https://github.com/b4b4r07/enhancd
# zplug "b4b4r07/enhancd", use:init.sh

# zaw
#   https://github.com/zsh-users/zaw
# ................................................................
zplug "zsh-users/zaw", use:zaw.zsh
zstyle ':filter-select:highlight' matched fg=yellow,standout
# zstyle ':filter-select' max-lines 10 # use 10 lines for filter-select
zstyle ':filter-select' max-lines -10 # use $LINES - 10 for filter-select
zstyle ':filter-select' rotate-list yes # enable rotation for filter-select
zstyle ':filter-select' case-insensitive yes # enable case-insensitive search
zstyle ':filter-select' extended-search yes # see below
# zstyle ':filter-select' hist-find-no-dups yes # ignore duplicates in history source
# zstyle ':filter-select' escape-descriptions no # display literal newlines, not \n, etc
# zstyle ':zaw:git-files' default zaw-callback-append-to-buffer # set default action for git-files
# zstyle ':zaw:git-files' alt zaw-callback-edit-file # set the alt action for git-files
bindkey "^R" zaw-history
bindkey "^R^R" zaw-history
bindkey "^R^B" zaw-bookmark
bindkey "^X^F" zaw-git-files
bindkey "^X^P" zaw-process
bindkey "^X^X" zaw-programs

# Install plugins if there are plugins that have not been installed
# ................................................................
if ! zplug check --verbose; then
  if [ ! -n "$ZPLUG_INSTALL" ]; then
    printf "Install? [y/N]: "
    if read -q; then
      echo; zplug install
    fi
  else
    zplug install
  fi
fi

# Theme
# ..............................................................
source ~/.zshrc.d/prompt.zsh
# zplug "sindresorhus/pure"

# load plugins
zplug load

# Configure
# ..............................................................
# Directory colors
# ................
# export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
eval $(dircolors -b)
# ls coloring in completion
# zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
# coloring selected
zstyle ':completion:*:default' menu select=2
# remove file mark
unsetopt list_types

# # Completion
# # ................
# autoload -Uz compinit && compinit
# # Show list completion candidates.
# setopt auto_list
# Select the completion candidates in order with TAB.
# setopt auto_menu
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' '+m:{A-Z}={a-z}' '+r:|[-_.]=**'
